class(model) ::=<<

<packageAndImports(model)>

<classDefinition(model)>
{

	<loadDeviceModel(model)>

	<exchangeFields(model)>
	
	<constructor(model)>

 	<subAndPubChannelAssignments(model)>

	// ///////////////////////////////////////////////////////////////////////////
	// Senders
	// //////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////	
	<senderMethods(model)>
	
	// ///////////////////////////////////////////////////////////////////////////
	// Abstract methods
	// /////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	<abstractMethod(model)>
	
	// ///////////////////////////////////////////////////////////////////////////
	// Listeners
	// ////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	<listenerClass(model)>
	
	// ///////////////////////////////////////////////////////////////////////////
	// Exchanges
	// ////////////////////////////////////////////////////////////////
	// ///////////////////////////////////////////////////////////////////////////
	<exchangesClass(model)>
}
>>

packageAndImports(model) ::=<<
package mdcf.device.<model.name>;

import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import com.google.common.io.CharStreams;

import mdcf.channelservice.common.IMdcfMessageListener;
import mdcf.channelservice.common.MdcfMessage;
import mdcf.channelservice.common.MdcfReceiverPort;
import mdcf.channelservice.common.MdcfSenderPort;
import mdcf.core.ctypes.DeviceModelPair;
import mdcf.core.ctypes.device.DeviceComponent;
import mdcf.core.ctypes.device.factory.common.IDeviceModel;
import mdcf.core.messagetypes.devicemgmt.PubChannelAssignmentMsg;
import mdcf.core.messagetypes.devicemgmt.SubChannelAssignmentMsg;
import mdcf.device.common.messages.Request;
import mdcf.device.common.messages.ActionRequest;
import mdcf.device.common.messages.ActionResult;
import mdcf.device.common.messages.Confirmation;
import mdcf.device.common.messages.Confirmation.Status;
import mdcf.device.exchanges.GetExchange;
import mdcf.device.exchanges.SetExchange;
import mdcf.device.exchanges.SporadicExchange;
import mdcf.device.exchanges.ActionExchange;
import mdcf.device.exchanges.PeriodicExchange;

>>


classDefinition(model) ::=<<
public abstract class <model.name>SuperType extends DeviceComponent
>>

loadDeviceModel(mode) ::=<<
	public static final String IEEE11073_MDC_ATTR_SYS_TYPE = "edu.ksu.cis.santos.mdcf.dms.examplev2.product.<model.name>";

	public static final DeviceModelPair models = new DeviceModelPair(
			readCompSig("<model.name>.compsig.xml"),
			readDML("<model.name>.dml.xml"));

	public static void main(String[] args) {
			<model.name>SuperType dev = new <model.name>();
			dev.connectToNetworkController();
	}

	private static String readCompSig(String compFileName) {
		String comp_sig = null;
		try {
			comp_sig = CharStreams.toString(new InputStreamReader(
					<model.name>SuperType.class
							.getResourceAsStream(compFileName),
					StandardCharsets.US_ASCII));
		} catch (Exception ex) {
			System.err.println("readCompSig:" + ex);
			System.err.println("check for " + compFileName);
		}
		return comp_sig;
	}

	private static String readDML(String modelFileName) {
		String model = null;
		try {
			model = CharStreams.toString(new InputStreamReader(
					<model.name>SuperType.class
							.getResourceAsStream(modelFileName),
					StandardCharsets.US_ASCII));
		} catch (Exception ex) {
			System.err.println("readDML:" + ex);
			System.err.println("check for " + modelFileName);
		}
		return model;
	}
>>

exchangeFields(model) ::=<<
<! Exchange Fields Initialization !>
	<model.getExchangeModels.values:{exchangeModel | <getExchangeField(model.name, exchangeModel.SendMessageType, exchangeModel.exchangeName)>}; separator="\n">
	<model.setExchangeModels.values:{exchangeModel | <setExchangeField(model.name, exchangeModel.SendMessageType, exchangeModel.exchangeName)>}; separator="\n">
	<model.periodicExchangeModels.values:{exchangeModel | <periodicExchangeField(model.name, exchangeModel.SendMessageType, exchangeModel.exchangeName)>}; separator="\n">
	<model.sporadicExchangeModels.values:{exchangeModel | <sporadicExchangeField(model.naem, exchangeModel.SendMessageType, exchangeModel.exchangeName)>}; separator="\n">
	<model.actionExchangeModels.values:{exchangeModel | <actionExchangeField(model.name, exchangeModel.exchangeName)>}; separator="\n">
>>

getExchangeField(ModelName, ParameterType, ExchangeName) ::=<<
	<ModelName>GetExchange\<Request, <ParameterType>\> <ExchangeName> = new <ModelName>GetExchange\<>();
>>

setExchangeField(ModelName, ParameterType, ExchangeName) ::=<<
	<ModelName>SetExchange\<<ParameterType>, Confirmation> <ExchangeName> = new <ModelName>SetExchange\<>();
>>

periodicExchangeField(ModelName, ParameterType, ExchangeName) ::=<<
	<ModelName>PeriodicExchange\<<ParameterType>\> <ExchangeName> = new <ModelName>PeriodicExchange\<>();
>>

sporadicExchangeField(ModelName, ParameterType, ExchangeName) ::=<<
	<ModelName>SporadicExchange\<<ParameterType>\> <ExchangeName> = new <ModelName>SporadicExchange\<>();
>>

actionExchangeField(ModelName, ExchangeName) ::=<<
	<ModelName>ActionExchange\<ActionRequest, ActionResult> <ExchangeName> = new <ModelName>ActionExchange\<>();	
>>

constructor(model) ::=<<
<! 	Building Constructors !>	
	protected <model.name>SuperType(String GUID, String deviceTypeName) {
		super(GUID, deviceTypeName);		
	}
	
	protected <model.name>SuperType(String guid, String name,
			boolean useCommunicationSecurityFeature) {
		super(guid, name);
		setUseCommunicationSecurityFeature(useCommunicationSecurityFeature);
	
		// Setting device model for PnP
		IDeviceModel deviceModel = this.getDeviceModel();
		deviceModel.setDeviceModel(models);
		setDeviceModel(deviceModel);
		
		<exchangeInits(model)>
	}
>>

exchangeInits(model) ::=<<											
	<model.getExchangeModels.values:{exchangeModel | <getExchangeInit(model.name, exchangeModel.SendMessageType, exchangeModel.exchangeName,
											exchangeModel.OutPortInfo.portName, exchangeModel.InPortInfo.portName)>}>
											
	<model.setExchangeModels.values:{exchangeModel | <setExchangeInit(model.name, exchangeModel.SendMessageType, exchangeModel.exchangeName,
											exchangeModel.OutPortInfo.portName, exchangeModel.InPortInfo.portName)>}>
											
	<model.periodicExchangeModels.values:{exchangeModel | <periodicExchangeInit(model.name, exchangeModel.SendMessageType, exchangeModel.exchangeName,
											exchangeModel.OutPortInfo.portName)>}>

	<model.sporadicExchangeModels.values:{exchangeModel | <sporadicExchangeInit(model.name, exchangeModel.SendMessageType, exchangeModel.exchangeName,
											exchangeModel.OutPortInfo.portName)>}>

	<model.actionExchangeModels.values:{exchangeModel | <actionExchangeInit(model.name, exchangeModel.exchangeName,
											exchangeModel.OutPortInfo.portName, exchangeModel.InPortInfo.portName)>}>
>>

getExchangeInit(ModelName, ParameterType, ExchangeName, SendPortName, RecvPortName) ::=<<
		<ExchangeName>.receiver = new MdcfReceiverPort\<>(
				"<RecvPortName>",
				Request.class);
		<ExchangeName>.receiver.getReceiver().registerMessageListener(
				new <ExchangeName>_Listener());
		<ExchangeName>.sender = new MdcfSenderPort\<>(
				"<SendPortName>",
				<ParameterType>.class);
>>


setExchangeInit(ModelName, ParameterType, ExchangeName, SendPortName, RecvPortName) ::=<<
		<ExchangeName>.receiver = new MdcfReceiverPort\<>(
				"<RecvPortName>",
				<ParameterType>.class);
		<ExchangeName>.receiver.getReceiver().registerMessageListener(
				new <ExchangeName>_Listener());
		<ExchangeName>.sender = new MdcfSenderPort\<>(
				"<SendPortName>",
				Confirmation.class);
>>

periodicExchangeInit(ModelName, ParameterType, ExchangeName, SendPortName) ::=<<
		<ExchangeName>.sender = new MdcfSenderPort\<>(
				"<SendPortName>",
				<ParameterType>.class);
>>

sporadicExchangeInit(ModelName, ParameterType, ExchangeName, SendPortName) ::=<<
		<ExchangeName>.sender = new MdcfSenderPort\<>(
				"<SendPortName>",
				<ParameterType>.class);
>>

actionExchangeInit(ModelName, ExchangeName, SendPortName, RecvPortName) ::=<<
		<ExchangeName>.receiver = new MdcfReceiverPort\<>(
				"<RecvPortName>",
				ActionRequest.class);
		<ExchangeName>.receiver.getReceiver().registerMessageListener(
				new <ExchangeName>_Listener());
		<ExchangeName>.sender = new MdcfSenderPort\<>(
				"<SendPortName>",
				ActionResult.class);
>>
	
	
	
		
	
subAndPubChannelAssignments(model) ::=<<
<! Mapping Ports !>	
// This binds the exchanges' senders to their respective channels
@Override
public void processSubscriberChannelAssignment(SubChannelAssignmentMsg subAssign) {
  <model.receivePortNames:{k | <subChannelAssignment(k)>}; separator="\n">
}

// This binds the exchanges' receivers to their respective channels
@Override
public void processPublisherChannelAssignment(PubChannelAssignmentMsg pubAssign) {
  <model.sendPortNames:{k | <pubChannelAssignment(k)>}; separator="\n">
}
>>
	
pubChannelAssignment(exchName) ::=<<
publisherChannelAssignmentHelper(pubAssign, this.<exchName>.sender);
>>

subChannelAssignment(exchName) ::=<<
subscriberChannelAssignmentHelper(subAssign, this.<exchName>.receiver);
>>	






senderMethods(model) ::=<<
<! Sender Method !>
	<model.periodicExchangeModels.values:{exchangeModel | <senderPeriodicMethod(exchangeModel.OutPortInfo.portName, exchangeModel.SendMessageType, exchangeModel.parameterName)>}>	
	<model.sporadicExchangeModels.values:{exchangeModel | <senderSporadicMethod(exchangeModel.OutPortInfo.portName, exchangeModel.SendMessageType, exchangeModel.parameterName)>}>												
>>

senderPeriodicMethod(OutportName, ParameterType, ParameterName) ::=<<
	protected void send_Periodic_<ParameterName>(<ParameterType> value) {
		this.<OutportName>.send(value);
	}
>>

senderSporadicMethod(OutportName, ParameterType, ParameterName) ::=<<
	protected void send_Sporadic_<ParameterName>(<ParameterType> value) {
		this.<OutportName>.send(value);
	}
>>

abstractMethod(model) ::=<<
<! Abstract Method !>
	//Collection of Get Exchange APIs
	<getAPIs(model)>
	
	//Collection of Set Exchange APIs
	<setAPIs(model)>
	
	//Collection of Action Exchange APIs
	<actionAPIs(model)>
>>

getAPIs(model) ::=<<
<model.getExchangeModels.values:{exchangeModel | <getAPI(exchangeModel.SendMessageType, exchangeModel.parameterName, exchangeModel.exchangeName)>}; separator="\n">
>>

setAPIs(model) ::=<<
<model.setExchangeModels.values:{exchangeModel | <setAPI(exchangeModel.SendMessageType, exchangeModel.parameterName, exchangeModel.exchangeName)>}; separator="\n">
>>

actionAPIs(model) ::=<<
<model.actionExchangeModels.values:{exchangeModel | <actionAPI(exchangeModel.actionName)>}; separator="\n">
>>

getAPI(Type, ParameterName, ExchangeName) ::=<<
	protected abstract <Type> get<ParameterName>_<ExchangeName>();
>>	

setAPI(Type, ParameterName, ExchangeName) ::=<<
	protected abstract Status set<ParameterName>_<ExchangeName>(<Type> value);
>>

actionAPI(ActionName) ::=<<	
	protected abstract boolean action<ActionName>();
>>

listenerClass(model) ::=<<
<! Listener Class !>
	<model.getExchangeModels.values:{exchangeModel | <getListenerClass(exchangeModel.exchangeName, exchangeModel.parameterName)>}; separator="\n">
	<model.setExchangeModels.values:{exchangeModel | <setListenerClass(exchangeModel.exchangeName, exchangeModel.parameterName, exchangeModel.SendMessageType)>}; separator="\n">
	<model.actionExchangeModels.values:{exchangeModel | <actionListenerClass(exchangeModel.actionName, exchangeModel.exchangeName)>}; separator="\n">
>>

getListenerClass(ExchangeName, ParameterName) ::=<<
	class <ExchangeName>_Listener implements IMdcfMessageListener {
		@Override
		public void onMessage(MdcfMessage message) {
			<ExchangeName>.send(get<ParameterName>_<ExchangeName>());
		}
	}
>>	
	
setListenerClass(ExchangeName, ParameterName, SendMessageType) ::=<<
	class <ExchangeName>_Listener implements IMdcfMessageListener {
		@Override
		public void onMessage(MdcfMessage message) {
			Status status = set<ParameterName>_<ExchangeName>((<SendMessageType>) xstream.fromXML(message.getTextMsg()));
			<ExchangeName>.send(new Confirmation(status));
		}
	}
>>	

actionListenerClass(ActionName, ExchangeName) ::=<<
	class <ExchangeName>_Listener implements IMdcfMessageListener {
		@Override
		public void onMessage(MdcfMessage message){
			boolean result = action<ActionName>();
			<ExchangeName>
			.send(new ActionResult(result ? ActionResult.Status.OK
					: ActionResult.Status.NOTOK));						
		}
	}
>>

exchangesClass(model) ::=<<
<! Exchanges !>
	<getExchangeClass(model)>
	<setExchangeClass(model)>
	<actionExchangeClass(model)>
	<periodicExchangeClass(model)>
	<sporadicExchangeClass(model)>
>>

getExchangeClass(model) ::=<<
	class <model.name>GetExchange\<S, T> implements GetExchange\<S, T> {
		public IMdcfMessageListener listener;
		public MdcfReceiverPort\<S> receiver;
		public MdcfSenderPort\<T> sender;

		@Override
		public void send(T msg) {
			sender.send(msg);
		}
	}
>>

setExchangeClass(model) ::=<<
	class <model.name>SetExchange\<S, T> implements SetExchange\<S, T> {
		public IMdcfMessageListener listener;
		public MdcfReceiverPort\<S> receiver;
		public MdcfSenderPort\<T> sender;

		@Override
		public void send(T msg) {
			sender.send(msg);
		}
	}
>>

actionExchangeClass(model) ::=<<
	class <model.name>ActionExchange\<S, T> implements ActionExchange\<S, T> {
		public IMdcfMessageListener listener;
		public MdcfReceiverPort\<S> receiver;
		public MdcfSenderPort\<T> sender;

		@Override
		public void send(T msg) {
			sender.send(msg);
		}
	}
>>
	
sporadicExchangeClass(model) ::=<<	
	class <model.name>SporadicExchange\<T> implements SporadicExchange\<T> {
		public MdcfSenderPort\<T> sender;

		@Override
		public void send(T msg) {
			sender.send(msg);
		}
	}
>>

periodicExchangeClass(model) ::=<<
	class <model.name>PeriodicExchange\<T> implements PeriodicExchange\<T> {
		public MdcfSenderPort\<T> sender;

		@Override
		public void send(T msg) {
			sender.send(msg);
		}
	}
>>	