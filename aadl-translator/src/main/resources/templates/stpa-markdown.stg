report(model) ::=<<
<header(model)>
<background(model)>
<preliminaries(model)>
<ctrlActTbl(model)>
<hazCtrlActs(model)>
>>

header(model) ::=<<
# STAMP-Report: <model.name>

>>

background(model) ::=<<

## Background

### Context
<model.hazardReportContext>

### Assumptions
<model.hazardReportAssumptions:{a | * <a>
}>

### Abbreviations
<model.hazardReportAbbreviations:{a | <a.name>
~   <a.full>: <a.definition>
}>

>>

preliminaries(model) ::=<<
## Preliminaries

### System Boundaries
![System Boundary](<model.hazardReportDiagrams.("SystemBoundary")>)

### Accident Levels
<model.accidentLevels.keys:{k | <accidentLevel(model.accidentLevels.(k), i)>
}>
### Accidents
<model.accidents.keys:{k | <preliminary(model.accidents.(k), i)>
}>
### Hazards
<model.hazards.keys:{k | <preliminary(model.hazards.(k), i)>
}>
### Safety Constraints
<model.constraints.values:{v | <preliminary(v, i)>
}>
### Control Actions
<model.channels.values:{v | <controlAction(v, i)>
}>
### Process Model
![Process Model](<model.hazardReportDiagrams.("ProcessModel")>)

>>

accidentLevel(accLvl, i) ::=<<
<i>. **<accLvl.name>**: <accLvl.description>
>>

preliminary(prelim, i) ::=<<
<i>. **<prelim.name>**: <prelim.description> [<prelim.parent.name>]
>>

controlAction(ctrlAct, i) ::=<<
<i>. <ctrlAct.name>: <ctrlAct.publisher.name> -> <ctrlAct.subscriber.name> (<ctrlAct.publisher.ports.(ctrlAct.pubPortName).type>) 
>>

ctrlActTbl(model) ::=<<
## Unsafe Control Actions

<model.longestColumnMap.("ALL")>
| <["Control Action", "Providing", "Not Providing", "Applied Too Long", "Stopped Too Soon", "Early", "Late"]:{g | <g> | }>
|----------------|-----------|---------------|------------------|------------------|-------|------|
<model.channels.values:{v | <ctrlActTblRow(v)>
}>

>>

ctrlActTblRow(ctrlAct) ::=<<
| [<ctrlAct.name>](#<ctrlAct.name>) | <["PROVIDING", "NOTPROVIDING", "APPLIEDTOOLONG", "STOPPEDTOOSOON", "EARLY", "LATE"]:{g | <ctrlActTblCell(ctrlAct.occurrenceMap.(g))>}>
>>

ctrlActTblCell(lastOccurrence) ::=<<
 <lastOccurrence:{o|<o.hazard.name> (<o.title>)}; separator=", "> | >>

hazCtrlActs(model) ::=<<
## Unsafe Control Action Causes and Compensations

<model.channels.values:{v | <hazControlAction(v)>
}>
>>

hazControlAction(ctrlAct) ::=<<
#### <ctrlAct.name>
<ctrlAct.occurrences:{o | <occurrenceBlock(o)>
}>
>>

occurrenceBlock(occ) ::=<<
* **<occ.keyword>**: <occ.title>
	* Cause: <occ.cause>
	* Compensation: <occ.compensation>
>>