------------------------------------------------------------------------------+
-- PulseOx_Exchange.aadl - Communication bundles of ports and data to act as
--   exchanges for the Nonin PulseOx device.
--
-- Author: Stephen C. Barrett (scbarrett@ksu.edu)
--         Department of Computing & Information Sciences
--               
-- Licensed Material - Property of Kansas State University.               
------------------------------------------------------------------------------+
-- All the exchanges are specializations of the DML_Comms patterns. 
------------------------------------------------------------------------------+


package PulseOx_Exchange
public
  with Base_Types, Data_Model;
  with DML_Comms, DML_Port_Props;
  with MDCF_Comms, MDCF_Data_Props, MDCF_Port_Props; 

------------------------------------------------------------------------------+
-- Sample data types for use in the exchanges.
------------------------------------------------------------------------------+

-- Signal used to initiate a get exchange.
--   Possible as a Boolean property, or...
data mdcf_request
properties
  MDCF_Data_Props::ICE_Request => true;
end mdcf_request;

--   ...as a Boolean data subcomponent.
data implementation mdcf_request.impl
subcomponents
  request: data Base_Types::Boolean;
end mdcf_request.impl;


-- Output data of a status request.
data mdcf_status
properties  -- Define in type or implementation?
  MDCF_Data_Props::access_val => ICE_Security_Access_Read;    
  MDCF_Data_Props::state_val => NotOk;  -- Can this be changed dynamically?    
end mdcf_status;


------------------------------------------------------------------------------+
-- The numeric payloads that are to be exchanged by this device.
------------------------------------------------------------------------------+

-- The SpO2 virtual channel.
data mdcf_spo2_num
end mdcf_spo2_num;

data implementation mdcf_spo2_num.impl
subcomponents
  spo2_num: data Base_Types::Float;  -- The exchange payload.
properties
  Data_Model::Real_Range => 0.0 .. 100.0;
  MDCF_Data_Props::MDC_ATTR_ID_PARAM_GRP => "SpO2 Channel";  -- No channel!
  MDCF_Data_Props::MDC_ATTR_ID_PHYSIO => "MDC_PULS_OXIM_SAT_O2";
  MDCF_Data_Props::MDC_ATTR_UNIT_CODE => "MDC_DIM_PERCENT";
end mdcf_spo2_num.impl;


-- The Pulse Rate virtual channel.
data mdcf_pulse_num
end mdcf_pulse_num;

data implementation mdcf_pulse_num.impl
subcomponents
  pulserate_num: data Base_Types::Float;  -- The exchange payload.
properties
  Data_Model::Real_Range => 20.0 .. 300.0;
  MDCF_Data_Props::MDC_ATTR_ID_PARAM_GRP => "Pulse Rate Channel"; -- No channel!
  MDCF_Data_Props::MDC_ATTR_ID_PHYSIO => "MDC_PULS_OXIM_PULS_RATE";
  MDCF_Data_Props::MDC_ATTR_UNIT_CODE => "MDC_DIM_BEAT_PER_MIN";
end mdcf_pulse_num.impl;


------------------------------------------------------------------------------+
-- Device's bundled exchanges and payloads.
------------------------------------------------------------------------------+

-- The status bundle is a get exchange for outputting device status. 
feature group status_get extends DML_Comms::dml_get
  (the_in_data => data mdcf_request, the_out_data => data mdcf_status)
features
  recv: refined to in event data port the_in_data { -- Add property to defaults.
    DML_Port_Props::service_time_range=> 0 .. 40;
  };
  send: refined to out event data port the_out_data { -- Alter default values.
    DML_Port_Props::service_time_range=> 0 .. 40;
  };
end status_get;


-- The spO2 bundle is the single metric entry of the SpO2 Channel, having 2 
--   types of exchanges for outputting device's spO2 reading.
 feature group spo2_get extends DML_Comms::dml_get
  (the_in_data => data mdcf_request, the_out_data => data mdcf_spo2_num.impl)
features
  recv: refined to in event data port the_in_data { -- Add property to defaults.
    DML_Port_Props::service_time_range=> 0 .. 40;
  };
  send: refined to out event data port the_out_data { -- Alter default value.
    DML_Port_Props::service_time_range=> 0 .. 40;
  };
end spo2_get;

feature group spo2_periodic extends DML_Comms::dml_periodic
  (the_out_data => data mdcf_spo2_num.impl)
end spo2_periodic;


-- The spO2 bundle is the single metric entry of the Pulse Rate Channel, having 
--   2 types of exchanges for outputting device's pulse rate reading.
 feature group pulse_get extends DML_Comms::dml_get
  (the_in_data => data mdcf_request, the_out_data => data mdcf_pulse_num.impl)
end pulse_get;

feature group pulse_periodic extends DML_Comms::dml_periodic
  (the_out_data => data mdcf_spo2_num.impl)
end pulse_periodic;

end PulseOx_Exchange;