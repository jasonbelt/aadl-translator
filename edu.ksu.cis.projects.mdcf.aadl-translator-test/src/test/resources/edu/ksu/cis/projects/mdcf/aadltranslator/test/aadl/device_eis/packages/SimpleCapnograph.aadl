------------------------------------------------------------------------------+
-- SimpleCapnograph.aadl - Corresponding AADL model of the Simple Capnography DML
--   model in project mdcf.dms.examplev2.product.
--
-- Author: Stephen C. Barrett (scbarrett@ksu.edu)
--         Department of Computing & Information Sciences
--               
-- Licensed Material - Property of Kansas State University.               
------------------------------------------------------------------------------+
-- Exchanges and their payload types are defined directly in this code. 
------------------------------------------------------------------------------+


package SimpleCapnograph
public
  with MAP_Properties;
  with MDCF_Data_Props, MDCF_Comm_Props, MDCF_ICE_Props;
  with MDCF_Types;


------------------------------------------------------------------------------+
-- The entire Capnograph medical device unit.
------------------------------------------------------------------------------+
system SimpleCapnograph
-- The unit's interface.
end SimpleCapnograph;

system implementation SimpleCapnograph.impl
subcomponents
  -- The unit's VMDs...
  capnograph: device CapnographVmd;

properties
--   The unit's meta-data...
  MDCF_Data_Props::IEEE11073_MDC_ATTR_SYS_TYPE => "Simple Capnograph";
  
  MDCF_Data_Props::ICE_ManufacturerModel => [
  	MDC_ATTR_ID_MODEL => [
  	  manufacturer => "Simple";
  	  model_number => "Capnograph 2000";
  	];
  	credentials => ("cert1", "cert2");
  ];
end SimpleCapnograph.impl;


------------------------------------------------------------------------------+
-- Capnograph unit's virtual medical devices.
------------------------------------------------------------------------------+
abstract CapnographVmd  -- More than an AADL device, so make abstract.
-- Features consist of the unit's payload-exchange "bundles".
features
  -- Device status of vmd through requester-responser communication pair. 
  Status_req: in event data port{  -- Publisher output.  
  	MDCF_Comm_Props::separation_interval_range => 200 ms .. 300 ms;          
	MDCF_ICE_Props::data_type => "Status";
	MDCF_ICE_Props::comm_type => requester;
  };  -- Trigger for output from requester.
  Status_res: out event data port MDCF_Types::Status {  -- Responder output.
  -- Properties found in AADL subset:  
	MDCF_ICE_Props::data_type => "Status";
	MDCF_ICE_Props::comm_type => responder;
  };
  
 
  -- EtCO2 numeric of Etco2.Metrics sub-channel through requester-responser communication pair. 
  Etco2_Metric_Etco2Num_req: in event data port{  -- Publisher output.  
  	MDCF_Comm_Props::separation_interval_range => 100 ms .. 200 ms;          
	MDCF_ICE_Props::channel_group => "Etco2";
	MDCF_ICE_Props::channel => "Metrics";
	MDCF_ICE_Props::data_type => "EtCo2_Numeric";
	MDCF_ICE_Props::comm_type => requester;
  };  -- Trigger for output from requester.
  Etco2_Metric_Etco2Num_res: out event data port MDCF_Types::EtCO2 {  -- Responder output.  
  -- Properties found in AADL subset:  
  	MDCF_ICE_Props::channel_group => "Etco2";
	MDCF_ICE_Props::channel => "Metrics";
	MDCF_ICE_Props::data_type => "EtCo2_Numeric";
	MDCF_ICE_Props::comm_type => responder;
  };


  -- EtCO2 numeric of Etco2.Metrics sub-channel through publisher-subscriber communication pair. 
  Etco2_Metric_Etco2Num_pub: out event data port MDCF_Types::EtCO2 {  -- Publisher output.  
  	MDCF_Comm_Props::separation_interval_range => 100 ms .. 200 ms;    
	MDCF_ICE_Props::channel_group => "Etco2";
	MDCF_ICE_Props::channel => "Metrics";
	MDCF_ICE_Props::data_type => "EtCo2_Numeric";
	MDCF_ICE_Props::comm_type => publisher;
  };
end CapnographVmd;


abstract implementation CapnographVmd.impl  -- Implement an abstract component?
end CapnographVmd.impl;


end SimpleCapnograph;